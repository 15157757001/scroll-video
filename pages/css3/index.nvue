<template>
	<div class="page" :style="{ height: height }">
		<cover-view class="cover-view-center">
			<div :style="{ height: height,width: width }" ref="touch" @click="videoPlay(index)" @touchstart="ListTouchStart" @touchmove="ListTouchMove">
				<div class="cover-view-right" v-if="distanceX==0">
					<image class="img" @click.stop="tapAvater"></image>
					<text class="right-text"> </text>
					<image class="img" @click.stop="tapLove"></image>
					<text class="right-text"> </text>
					<image class="img" @click.stop="tapMsg"></image>
					<text class="right-text"> </text>
					<image class="img" @click.stop="tapShare"></image>
					<text class="right-text"> </text>
				</div>
			</div>
		</cover-view>
		<div class="swiper" ref="swiper">
			<block v-for="(item, idx) in videoList" :key="idx">
				<div class="video-box" :style="{ height: height }">
					<block v-if="Math.abs(index-idx)<=1">
						<chunlei-video class="video" :src="item.src"  :height="height" :width="width" 
							:play="item.flag" :gDuration="item.duration"
							:initialTime="item.initialTime" @pause="pauseVideo"
						>
						</chunlei-video>
						<cover-view class="cover-view-left">
							<text class="left-text">@{{item.at}}</text>
							<text class="left-text">{{item.content}}</text>
						</cover-view>
						<cover-view class="cover-view-right">
							<cover-image :src="item.avater" class="avater img"></cover-image>
							<text class="right-text-avater">+</text>
							<text class="right-text"></text>
							<cover-image :src="item.check?'../../static/aixinRed.png':'../../static/aixin.png'" class="img"></cover-image>
							<text class="right-text">{{item.like}}</text>
							<cover-image src="../../static/xiaoxi.png" class="img"></cover-image>
							<text class="right-text">{{item.comment}}</text>
							<cover-image src="../../static/share-fill.png" class="img"></cover-image>
							<text class="right-text">分享</text>
						</cover-view>
					</block>
				</div>
				
			</block>
		</div>
		<div class="left-div" :style="{ height: height,width: width,left:`${-parseInt(width)}px` }" ref="left">
			<text class="title-text">{{videoList[index].at}}</text>
		</div>
		<div class="right-div" :style="{ height: height,width: width,right:`${-parseInt(width)}px` }" ref="right">
			<text class="title-text">{{videoList[index].content}}</text>
		</div>
	</div>
</template>

<script>
	import chunleiVideo from '../../components/chunlei-video/chunlei-video.vue';
	const BindingX = uni.requireNativePlugin('bindingx');
	const animation = weex.requireModule('animation');
	const modal = weex.requireModule('modal');

	export default { 
		components:{
			chunleiVideo
		},
		data(){
			return{
				typeX:true, //是否开启左右滑动
				oldTouces:{},
				touchType:null,
				gesToken:0,
				height:'667px',
				index:0,
				oldIndex:0,
				width:'',
				sysheight:0,
				distance:0,
				distanceX:0,
				scroll:false,
				playCount:2,//剩余多少视频加载视频列表
				videoList:[
					{
						src:'https://dcloud-img.oss-cn-hangzhou.aliyuncs.com/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20181126.mp4',
						content:'为什么要选择uni-app？',
						flag:false,
						check:false,
						like:'10w',
						comment:'1045',
						avater:'../../static/logo.png',
						initialTime:0,
						at:'Dcloud',
						duration:841
					},
					{
						src:'http://baobab.kaiyanapp.com/api/v1/playUrl?vid=129764&resourceType=video&editionType=default&source=aliyun&playUrlType=url_oss',
						content:'广告有反转：危机感十足！一辆车都比你靠谱',
						flag:false,
						check:true,
						like:'7w',
						comment:'1045',
						avater:'http://img.kaiyanapp.com/e44ed5fcfa424ba35761ce5f1339bc16.jpeg?imageMogr2/quality/60/format/jpg',
						initialTime:0,
						at:'欧美广告精选',
						duration:149
					},
					{
						src:'http://baobab.kaiyanapp.com/api/v1/playUrl?vid=164016&resourceType=video&editionType=default&source=aliyun&playUrlType=url_oss',
						content:'无辣不欢，你没见过小龙虾的大场面',
						flag:false,
						check:false,
						like:'7w',
						comment:'1045',
						avater:'http://img.kaiyanapp.com/7af2bb1bc134fb1115d48f05e9d317f0.jpeg?imageMogr2/quality/60/format/jpg',
						initialTime:0,
						at:'世界美食荟萃',
						duration:1162
					},
				]
			}
		},
		created(){
			//#ifdef APP-PLUS
			plus.screen.lockOrientation("portrait-primary")
			//#endif
			this.sysheight = uni.getSystemInfoSync().windowHeight
			this.height = `${this.sysheight}px` 
			let width = uni.getSystemInfoSync().windowWidth 
			this.width = `${width}px` 
		},
		async mounted() {
			await this.pushVideoList()
			this.videoPlay(this.index)
		},
		onHide(){
			for (let item of this.videoList) {
				item.flag = false
			}
		},
		methods:{
			getEl: function(el) {
			    if (typeof el === 'string' || typeof el === 'number') return el;
				if (WXEnvironment) {
				    return el.ref;
				} else {
				    return el instanceof HTMLElement ? el : el.$el;
				}
			},
			pushVideoList(){
				let promise = new Promise((resolve,reject)=>{
					uni.request({
						url: 'https://api.apiopen.top/videoRecommend?id=127397',
						success: (res) => {
							let videoGroup = []
							for (let item of res.data.result) {
								if(item.type == 'videoSmallCard'){
									videoGroup.push({
										src:item.data.playUrl,
										content:item.data.title,
										flag:false,
										check:false,
										like:'7w',
										comment:'1045',
										at:item.data.author.name,
										avater:item.data.author.icon,
										initialTime:0,
										duration:item.data.duration
									})
								}
							}
							this.videoList = [...this.videoList,...videoGroup]
							resolve()
						}
					})
				}) 
				return promise
			},
			pauseVideo(val){
				if(typeof this.videoList[this.oldIndex].initialTime !='undefined') this.videoList[this.oldIndex].initialTime = val
			},
			clickVideo(){
				this.videoList[this.index].flag = !this.videoList[this.index].flag
			},
			// ListTouch触摸开始
			ListTouchStart(e) {
				this.oldTouces = e.changedTouches[0]
			},
			//判定方向
			ListTouchMove(e){
				//结束启动判断
				if(this.touchType == 'stop') return
				let { oldTouces,oldValue,touchType } = this
				let newTouces = e.changedTouches[0]
				
				if(!this.touchType){
					//滑动启动条件
					this.touchType = Math.abs( newTouces.pageY - oldTouces.pageY ) > 5 ? 'moveY' : null
					//是否开启左右滑动
					if(!this.touchType&&this.typeX){
						this.touchType = newTouces.pageX - oldTouces.pageX > 5 ? 'moveXR' : this.touchType
						this.touchType = newTouces.pageX - oldTouces.pageX < -5 ? 'moveXL' : this.touchType
					}
					
				}else{
					let move
					if(this.touchType == 'moveY'){
						move = 0
					}else if(this.touchType == 'moveXL'){
						move = -1
					}else if(this.touchType == 'moveXR'){
						move = 1
					}
					
					//关闭启动判断
					this.touchType = 'stop'
					// 如果在执行动画，就不触发
					if(this.scroll) return 
					// 解绑动画
					if(this.gesToken != 0) {
						BindingX.unbind({
							eventType:'pan',
							token:this.gesToken
						})
						this.gesToken = 0
						// return
					}
					
					
					let touch_origin = `y+${this.distance}<=0 && ${move}==0 && ${this.distanceX}==0 ? y+${this.distance} : ${this.distance}`
					// 找到元素 
					let swiperRef = this.getEl(this.$refs.swiper)
					let leftRef = this.getEl(this.$refs.left)
					let rightRef = this.getEl(this.$refs.right)
					let touchRef = this.getEl(this.$refs.touch)
					let gesTokenObj = BindingX.bind({
						anchor:touchRef,
						eventType:'pan',
						props: [
							{element:swiperRef, property:'transform.translateY',expression: touch_origin},
							{element:swiperRef, property:'transform.translateX',expression: `${move}!=0 && ${move}*x>0 ?x+${this.distanceX} : ${this.distanceX}`},
							{element:leftRef, property:'transform.translateX',expression: `${move}!=0&& ${move*this.distanceX}<=0?x+${this.distanceX} : ${this.distanceX}`},
							{element:rightRef, property:'transform.translateX',expression: `${move}!=0&& ${move*this.distanceX}<=0?x+${this.distanceX} : ${this.distanceX}`}
						]
					}, (e) => {
						if(e.state === 'end') {
							this.touchType = null
							//上下
							if(move==0&& this.distanceX==0){
								// 记录当前坐标
								const distance = this.distance + e.deltaY
								
								if(distance>0) return
								
								this.bindTiming(distance,e.deltaY)
							}
							if(move!=0&& move*this.distanceX<=0){
								const distance = this.distanceX + e.deltaX
								if(this.scroll) return 
								this.bindTimingX(distance,e.deltaX)
							}
						}
					})
					// 记录下取消的token 多次 ontouchstart 时要带着 token 把上次的解绑
					this.gesToken = gesTokenObj.token
				}
				
			},
			bindTiming(distance,Y){
				// 开始执行动画
				this.scroll = true
				let swiperRef = this.getEl(this.$refs.swiper)
				let sysheight = this.sysheight
				
				let changed_Y, final_Y, translate_Y_origin
				
				// 生成表达式逻辑
				if( Math.abs(Y)<=10) {
					// 往上下拖动20以内时
					final_Y = this.distance	// 回到原点
					changed_Y = final_Y - distance    // 计算出需要位置的值
					translate_Y_origin = `easeOutExpo(t,${distance},${changed_Y},300)` // 运动曲线为easeOutElastic
				} else{
					// 往上下拖动超过一半时
					final_Y = this.distance + (Y>0?1:-1) *this.sysheight
					changed_Y= final_Y - distance// 计算出需要位置的值
					translate_Y_origin = `easeOutExpo(t,${distance},${changed_Y},300)` // 运动曲线为easeOutExpo
				}
				let result = BindingX.bind({
					eventType:'timing',       // 结束的时候是没有任何监听的 用 timing 来做定时的动画
					exitExpression:"t>300",  // 当时间超过 300ms 结束动画
					props: [
						{element:swiperRef, property:'transform.translateY',expression:translate_Y_origin},
						]
					},async (e) => {
						if(e.state === 'end' || e.state === 'exit') {
							this.distance = final_Y
							this.scroll = false
							if( Math.abs(Y)>10) {
								for (let item of this.videoList) {
									item.flag = false
								}
								this.index = -this.distance/this.sysheight
								
								this.videoList[this.index].flag = true
								//加载视频
								if(this.videoList.length - this.index - 1 <= this.playCount){
									await this.pushVideoList()
								}
							}
						}
				})
			},
			bindTimingX(distance,X){
				// 开始执行动画
				this.scroll = true
				let swiperRef = this.getEl(this.$refs.swiper)
				let leftRef = this.getEl(this.$refs.left)
				let rightRef = this.getEl(this.$refs.right)
				let width = parseInt(this.width) 
				
				let changed_X, final_X, origin
				
				// 生成表达式逻辑
				if( Math.abs(X)<=10) {
					final_X = this.distanceX	// 回到原点
					changed_X = final_X - distance    // 计算出需要位置的值
					origin = `easeOutExpo(t,${distance},${changed_X},300)` // 运动曲线为easeOutElastic
				} else{
					final_X = this.distanceX + (X>0?1:-1) *width
					changed_X= final_X - distance// 计算出需要位置的值
					origin = `easeOutExpo(t,${distance},${changed_X},300)` // 运动曲线为easeOutExpo
				}
				let result = BindingX.bind({
					eventType:'timing',       // 结束的时候是没有任何监听的 用 timing 来做定时的动画
					exitExpression:"t>300",  // 当时间超过 300ms 结束动画
					props: [
						{element:swiperRef, property:'transform.translateX',expression:origin},
						{element:swiperRef, property:'transform.translateY',expression:`easeOutExpo(t,${this.distance},0,200)`},
						{element:leftRef, property:'transform.translateX',expression:origin},
						{element:rightRef, property:'transform.translateX',expression:origin}
						]
					},async (e) => {
						if(e.state === 'end' || e.state === 'exit') {
							this.distanceX = final_X
							this.scroll = false
							if( Math.abs(X)<=10&&this.distanceX==0){
								
							}else if( Math.abs(X)>10&&this.distanceX!=0) {
								for (let item of this.videoList) {
									item.flag = false
								}
							}else if(Math.abs(X)>10&&this.distanceX==0){
								this.videoPlay(this.index)
							}
							
						}
				})
			},
			videoPlay(index){
				if(this.distanceX!=0) return
				let promise = new Promise((resolve,reject)=>{
					resolve()
				})
				promise.then(res=>{
					this.videoList[index].flag = !this.videoList[index].flag
				})
			},
			tapLove(){
				if(this.distanceX!=0) return
				this.videoList[this.index].check = !this.videoList[this.index].check
				this.videoList = [...this.videoList]
			},
			tapAvater(){
				if(this.distanceX!=0) return
				uni.showToast({
					icon:'none',
					title:`点击索引为${this.index}的头像`
				})
			},
			tapMsg(){
				if(this.distanceX!=0) return
				uni.showToast({
					icon:'none',
					title:`查看索引为${this.index}的评论`
				})
			},
			tapShare(){
				if(this.distanceX!=0) return
				uni.showToast({
					icon:'none',
					title:`分享索引为${this.index}的视频`
				})
			}
		},
		watch:{
			index(newVal,oldVal){
				this.oldIndex = oldVal
			}
		}
	}
</script>

<style lang="scss" scoped>
	.page{
		overflow: hidden;
		position: relative;
	}
	.swiper{
		position: relative;
		background-color: #000;
	}
	.left-div{
		position: absolute;
		top: 0;
		justify-content: center;
		align-items: center;
	}
	.right-div{
		position: absolute;
		top: 0;
		justify-content: center;
		align-items: center;
	}
	.title-text{
		font-size: 16px;
		color: #000000;
	}
	.video-box{
	
		background-color: #000;
	}
	.cover-view-center{
		position: fixed;
		justify-content: center;
		align-items: center;
		
		z-index: 999;
	}
	.cover-view-top{
		position: fixed;
		width: 750rpx;
		height: 150px;
		overflow: hidden;
	}
	.cover-view-left{
		position: absolute;
		margin-left: 10upx;
		width: 500upx;
		bottom: 120upx;
		z-index: 9999;
		font-size: 16px;
		color: #FFFFFF;
	}
	.left-text{
		font-size: 16px;
		color: #FFFFFF;
		margin-bottom: 20upx;
	}
	.avater{
		border-radius: 50upx;
		border-color: #fff;
		border-style: solid;
		border-width: 2px;
	}
	
	.cover-view-right{
		position: absolute;
		bottom: 160upx;
		right: 20upx;
		z-index: 9999;
	}
	.right-text-avater{
		position: absolute;
		font-size: 14px;
		top: 80upx;
		left: 30upx;
		height: 40upx;
		width: 40upx;
		background-color: #DD524D;
		color: #FFFFFF;
		border-radius: 50%;
		text-align: center;
		line-height: 40upx;
		z-index: 999;
	}
	
	.avater-icon{
		height: 40upx;
		width: 40upx;
		
		color: #fff;
		background-color: #DD524D;
		border-radius: 50%;
		position: absolute;
		left: 30upx;
		top:-20upx;
	}
	
	.right-text{
		text-align: center;
		font-size: 14px;
		color: #FFFFFF;
		margin-bottom: 50upx;
		height: 20px;
	}
	.img{
		height: 100upx;
		width: 100upx;
		opacity: 0.9;
	}
</style>
